import java.util.HashMap;
import java.util.Map.Entry;

import javax.swing.JPanel;

import org.jivesoftware.smack.Connection;
import org.jivesoftware.smack.ConnectionCreationListener;
import org.jivesoftware.smack.ConnectionListener;
import org.jivesoftware.smack.PacketListener;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.filter.MessageTypeFilter;
import org.jivesoftware.smack.filter.PacketFilter;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.jivesoftware.smack.packet.Message.Type;

public class XmppPanel extends JPanel implements ConnectionListener,PacketListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5657339239939443076L;
	private HashMap<String, Connection> m_connections = new HashMap<>();
	private HashMap<String, String> m_accounts = new HashMap<>();

	public XmppPanel() {
		m_accounts.put("sip_gateway1", "sip_gateway1");
		m_accounts.put("sip_gateway2", "sip_gateway2");
		
		connect();
	}

	public void connect() {
		Connection conn;
		for (Entry<String, String> e : m_accounts.entrySet()) {
			try {
				conn = new WTFConnection();
				conn.connect();
				conn.login(e.getKey(), e.getValue());
				conn.addPacketListener(this,new MessageTypeFilter(Type.chat));
				m_connections.put(e.getKey(), conn);
			} catch (XMPPException _e) {
				System.err.println("connection exception");
				_e.printStackTrace();
			}
		}
	}

	@Override
	public void processPacket(Packet _packet) {
		//System.out.println(_packet.toXML());
		printPacket(_packet);
	}
	public void printPacket(Packet _packet){
		if (!(_packet instanceof Message)){
			return;
		}
		Message msg=(Message)_packet;
	
		String p=String.format("from:%s to:%s message:%s",msg.getFrom(),msg.getTo(),msg.getBody());
		System.out.println(p);
	}

	@Override
	public void connectionClosed() {
		
	}

	@Override
	public void connectionClosedOnError(Exception arg0) {
		
	}

	@Override
	public void reconnectingIn(int arg0) {
		
	}

	@Override
	public void reconnectionFailed(Exception arg0) {	
		
	}

	@Override
	public void reconnectionSuccessful() {
		
	}

}
